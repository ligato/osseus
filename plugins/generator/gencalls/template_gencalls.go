package gencalls

const goCodeTemplate = `
/*** This is an autogenerated file; This file can be edited but changes should be saved***/

package main

import (
    "github.com/ligato/cn-infra/agent"
    "github.com/ligato/cn-infra/logging"
    log "github.com/ligato/cn-infra/logging/logrus"
{{- range .PluginAttributes}}
    {{.ImportPath -}}
{{- end}}
)

// {{.ProjectName}} is a struct holding internal data for the {{.ProjectName}} Agent
type {{.ProjectName}} struct {
{{- range .PluginAttributes}}
    {{.ReferenceName}}    *{{.Identifier}}.Plugin
{{- end}}
}

// New creates new {{.ProjectName}} instance.
func New() *{{.ProjectName}} {
    return &{{.ProjectName}} {
{{- range .PluginAttributes}}
        {{.ReferenceName}}: &{{.Identifier}}.DefaultPlugin,
{{- end}}		
    }
}

// Init initializes main plugin.
func (pr *{{.ProjectName}}) Init() error {
    return nil
}

func (pr *{{.ProjectName}}) AfterInit() error {
    resync.DefaultPlugin.DoResync()
    return nil
}

// Close can be used to close used resources.
func (pr *{{.ProjectName}}) Close() error {
    return nil
}

// String returns name of the plugin.
func (pr *{{.ProjectName}}) String() string {
    return "{{.ProjectName}}"
}

func main() {
    {{.ProjectName}} := New()

    a := agent.NewAgent(agent.AllPlugins({{.ProjectName}}))

    if err := a.Run(); err != nil {
        log.DefaultLogger().Fatal(err)
    }
}

func init() {
	log.DefaultLogger().SetOutput(os.Stdout)
	log.DefaultLogger().SetLevel(logging.DebugLevel)
}`