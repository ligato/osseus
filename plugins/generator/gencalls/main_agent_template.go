// Copyright (c) 2019 Cisco and/or its affiliates.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at:
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package gencalls

// text/template for main.go files
const mainCodeTemplate= `
/*** This is an autogenerated file; This file can be edited but changes should be saved***/

package main

import (
    "os"
    "github.com/ligato/cn-infra/agent"
    "github.com/ligato/cn-infra/logging"
    log "github.com/ligato/cn-infra/logging/logrus"
{{- range .PluginAttributes}}
    {{.ImportPath -}}
{{- end}}
)

// {{.AgentName}} is a struct holding internal data for the {{.ProjectName}} Agent
type {{.AgentName}} struct {
{{- range .PluginAttributes}}
    {{.Declaration}}
{{- end}}
}

// New creates new {{.AgentName}} instance.
func New() *{{.AgentName}} {
    return &{{.AgentName}} {
{{- range .PluginAttributes}}
{{- if eq .Initialization "config"}}
        PluginConfig: config.ForPlugin("{{$.AgentName}}"),
{{- else}}
        {{.Initialization}}
{{- end}}
{{- end}}
    }
}

// Init initializes main plugin.
func (pr *{{.AgentName}}) Init() error {
    return nil
}

func (pr *{{.AgentName}}) AfterInit() error {
    resync.DefaultPlugin.DoResync()
    return nil
}

// Close can be used to close used resources.
func (pr *{{.AgentName}}) Close() error {
    return nil
}

// String returns name of the plugin.
func (pr *{{.AgentName}}) String() string {
    return "{{.AgentName}}"
}

{{- if .IdxMapExists}}
// IndexFunction is used in idx map, returns map field->values for a given item.
func IndexFunction(item interface{}) map[string][]string{
    return nil
}
{{- end}}

func main() {
    {{.AgentName}} := New()

    a := agent.NewAgent(agent.AllPlugins({{.AgentName}}))

    if err := a.Run(); err != nil {
        log.DefaultLogger().Fatal(err)
    }
}

func init() {
    log.DefaultLogger().SetOutput(os.Stdout)
    log.DefaultLogger().SetLevel(logging.DebugLevel)
}`