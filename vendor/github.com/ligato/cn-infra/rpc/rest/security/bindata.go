// Code generated by go-bindata.
// sources:
// templates/login.tmpl
// DO NOT EDIT!

package security

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesLoginTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x51\x3d\x6f\xf4\x20\x0c\xde\xf3\x2b\xfc\x7a\x7f\x85\x74\x33\xb0\xb4\xdd\x2a\xf5\x86\x2e\x1d\x21\xb8\x01\x89\x8f\x28\x38\xd7\xde\xbf\xaf\x48\xc8\x5d\xa5\xaa\x5d\xe2\xd8\xcf\x17\x18\xf9\xef\xf1\xe5\xe1\xf5\xed\xfc\x04\x9e\x53\xd4\x83\x6c\x05\xa2\xc9\x93\x42\xca\xd8\x06\x64\x9c\x1e\x00\x00\x24\x07\x8e\xa4\x9f\xcb\x14\xb2\x14\x7b\x33\x48\xb1\x13\xa4\x2d\xee\xaa\x07\xe9\xc2\x05\xc6\x68\x6a\x55\x18\xcb\xf4\xff\xbd\x2c\x09\xbb\xdc\x9f\x0e\xad\x3f\xf5\x51\x83\x21\x11\xfb\xe2\x14\xce\xa5\x32\x82\x19\x39\x94\xac\x50\x98\x95\x3d\x65\x0e\xa3\x61\xea\x16\x9b\x26\x1a\x4b\x11\x9a\x52\x61\x36\x89\xf0\x70\xdd\x80\x6f\xc4\x90\xe7\x95\x81\xaf\x33\x29\x64\xfa\x64\x84\xe0\xba\x04\xda\xf7\x90\x83\xb4\x0b\x88\x5f\x12\x66\x53\xeb\x47\x59\x1c\xea\x73\xff\xfb\x3b\xe8\xc6\xdf\xc2\xee\xdd\x1e\x78\x77\xfb\x11\x6a\x57\xe6\x92\xbb\x4b\x5d\x6d\x0a\x7c\xbb\xd9\x8e\x75\xb2\x14\xed\x64\x6d\xf3\x2e\x5c\x5a\xe9\x9b\x17\xdb\x0b\x7e\x05\x00\x00\xff\xff\x7a\x1c\x32\xa8\xd1\x01\x00\x00")

func templatesLoginTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesLoginTmpl,
		"templates/login.tmpl",
	)
}

func templatesLoginTmpl() (*asset, error) {
	bytes, err := templatesLoginTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/login.tmpl", size: 465, mode: os.FileMode(420), modTime: time.Unix(1537971558, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/login.tmpl": templatesLoginTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"login.tmpl": &bintree{templatesLoginTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

